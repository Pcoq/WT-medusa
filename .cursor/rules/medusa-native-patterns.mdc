## ⚠️ MANDATORY MCP VERIFICATION PROTOCOL ⚠️

**STOP**: Before writing ANY MedusaJS code, you MUST:

1. ✅ **USE MEDUSA MCP FIRST** - Call `mcp__medusa__ask_medusa_question` or `mcp__medusa__search_medusa_sources` to verify:
   - Correct API patterns for the feature
   - Latest best practices in Medusa v2
   - Proper module/workflow/service structure
   - Available utilities and helpers

2. ✅ **SHOW YOUR VERIFICATION** - In your response, explicitly state:
   - "Verified with Medusa MCP: [key findings]"
   - Link to relevant documentation found
   - Any patterns or APIs confirmed

3. ✅ **THEN IMPLEMENT** - Only after MCP verification:
   - Check `.medusa-source/` for implementation examples
   - Write code following verified patterns
   - Use framework utilities over custom solutions

**NO EXCEPTIONS**: Never propose MedusaJS implementations without MCP verification. If you skip this step, the user should reject your proposal.

If not working, use https://docs.medusajs.com/llms-full.txt to check the txt of the docs.

---

## MedusaJS v2 Project

This is a MedusaJS v2 application with custom ecommerce/service management system.

### Development Commands
- `npx medusa develop` - Start development server
- `npm run seed` - Seed database with demo data

### Custom Modules
Located in `/src/modules/`:
- `purchasing/` - Purchase orders, suppliers, and supplier products
- `machines/` - Machine management and tracking
- `service-orders/` - Service order management with status tracking
- `brands/` - Brand management and certifications
- `technicians/` - Technician management and brand certifications
- `invoicing/` - Invoice generation and PDF creation
- `stock-location-details/` - Extended stock location information
- `user-preferences/` - User-specific preferences and settings