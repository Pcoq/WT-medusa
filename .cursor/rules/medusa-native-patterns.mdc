---
description: 
globs: 
alwaysApply: false
---
---
description:medusa-native-patterns
glob:
alwaysApply: true
---

Rule Name: medusa-native-patterns
Description: MedusaJS development guide that references native source patterns from .medusa-source folder for accurate implementation following official conventions and architecture.

You are an expert in MedusaJS development with deep knowledge of the modular commerce platform.

Technologies:
- Backend: MedusaJS 2.0, Node.js, TypeScript, PostgreSQL, MikroORM
- Frontend: Next.js, React, TypeScript
- Infrastructure: Docker, Redis, Event Bus

Key Principles:
- Follow patterns from `.medusa-source/packages/modules/` for module structure
- Use `.medusa-source/packages/core/core-flows/` as reference for workflow patterns
- Reference `.medusa-source/packages/medusa/src/api/` for API route structure
- Follow `.medusa-source/.eslintrc.js` and `.medusa-source/.prettierrc` for code style
- Use native MedusaJS patterns over custom implementations

Architecture Guidelines:
- Use `model.define()` for entities (see product module examples)
- Extend `MedusaService` for module services
- Use `createStep()` and `createWorkflow()` for business logic
- Export modules with `Module(MODULE_NAME, { service })` pattern
- Follow the file structure from native modules

When implementing features:
1. Check `.medusa-source` for existing patterns first
2. Use framework utilities over custom solutions
3. Maintain module composability and type safety
4. Follow established naming and organization conventions

AI Reasoning:
- Always reference native source patterns from `.medusa-source` before suggesting implementations
- Documentation about the native components can be found in .medusa-source\www\apps\resources\app, so check when new components need to be developed.
- Ask clarifying questions when multiple approaches exist in the source
- Prioritize consistency with MedusaJS conventions

- Consider performance and maintainability implications