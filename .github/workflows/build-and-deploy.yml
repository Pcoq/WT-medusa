name: Build and Deploy Medusa to VPS

on:
  push:
    branches: [ master ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: medusa-app

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      image: ${{ steps.image.outputs.image }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Output image
      id: image
      run: echo "image=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT

  deploy:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.VPS_HOST }}
        username: root
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          # Navigate to app directory
          cd /var/www/WT-medusa
          
          # Ensure .env exists (do not overwrite if present)
          if [ ! -f .env ]; then
            cat > .env << 'EOF'
          NODE_ENV=production
          REDIS_URL=redis://redis:6379
          # Required: Add DATABASE_URL, JWT_SECRET, COOKIE_SECRET
          # Add STORE_CORS, ADMIN_CORS, AUTH_CORS as needed
          EOF
            echo "Created default .env - please configure with your secrets"
          fi
          
          # Create hardened docker-compose.yml if missing
          if [ ! -f docker-compose.yml ]; then
            cat > docker-compose.yml << 'EOF'
          version: '3.8'
          services:
            redis:
              image: redis:7-alpine
              container_name: medusa_redis
              restart: unless-stopped
              networks:
                - medusa_network
              healthcheck:
                test: ["CMD", "redis-cli", "ping"]
                interval: 30s
                timeout: 10s
                retries: 3
            
            medusa:
              image: ${{ needs.build.outputs.image }}
              container_name: medusa_backend
              restart: unless-stopped
              depends_on:
                redis:
                  condition: service_healthy
              ports:
                - "9000:9000"
              env_file:
                - .env
              environment:
                NODE_ENV: production
                REDIS_URL: redis://redis:6379
              volumes:
                - uploads:/app/uploads
                - logs:/app/logs
              networks:
                - medusa_network
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 30s

          volumes:
            uploads:
              driver: local
            logs:
              driver: local

          networks:
            medusa_network:
              driver: bridge
          EOF
          fi
          
          # Login to registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          
          # Pull the new image
          docker pull ${{ needs.build.outputs.image }}
          
          # Ensure host directories exist with correct ownership (uid 1001 = medusa user)
          mkdir -p uploads logs
          chown -R 1001:1001 uploads logs
          
          # Update environment with new image
          export MEDUSA_IMAGE="${{ needs.build.outputs.image }}"
          
          # Deploy with compose
          docker compose pull medusa
          docker compose up -d
          
          # Cleanup old images
          docker image prune -f
          
          # Show deployment status
          echo "Deployment Status:"
          docker compose ps
          docker compose logs --tail=10 medusa
