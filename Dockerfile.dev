# Development Dockerfile for MedusaJS v2 - No build step, builds at runtime
# Build stage - installs dependencies only
FROM node:20-slim AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create medusa user (uid 1001)
RUN groupadd -g 1001 nodejs && \
    useradd -m -u 1001 -g nodejs medusa

# Enable corepack as root (needs permissions to create symlinks)
RUN corepack enable

# Set working directory and ownership
WORKDIR /app
RUN chown medusa:nodejs /app

# Switch to medusa user and configure Yarn under $HOME
USER medusa
ENV HOME=/home/medusa
ENV YARN_CACHE_FOLDER=$HOME/.yarn/cache
ENV YARN_GLOBAL_FOLDER=$HOME/.yarn/global
ENV YARN_INSTALL_STATE_PATH=$HOME/.yarn/install-state.gz

# Copy package manager files
COPY --chown=medusa:nodejs package.json yarn.lock .yarnrc.yml ./

# Install dependencies via Corepack as medusa user
RUN corepack yarn --version && \
    corepack yarn install

# Copy source code
COPY --chown=medusa:nodejs . .

# Patch zod package for compatibility
RUN node -e "const fs=require('fs');const p='node_modules/zod/package.json';const j=JSON.parse(fs.readFileSync(p,'utf8'));j.exports=j.exports||{};j.exports['./v3']={types:'./index.d.ts',require:'./lib/index.js',import:'./lib/index.mjs'};fs.writeFileSync(p,JSON.stringify(j,null,2)+'\n');console.log('Patched zod package.json with ./v3 export');"

# Runtime stage - runs in development mode
FROM node:20-slim AS runtime

# Install runtime OS dependencies including PDF generation support
RUN apt-get update && apt-get install -y \
    dumb-init \
    curl \
    ca-certificates \
    fonts-liberation \
    libnss3 \
    libxss1 \
    libappindicator3-1 \
    libasound2 \
    libatk-bridge2.0-0 \
    libatk1.0-0 \
    libcups2 \
    libdbus-1-3 \
    libdrm2 \
    libgbm1 \
    libgtk-3-0 \
    libnspr4 \
    libx11-xcb1 \
    libxcomposite1 \
    libxdamage1 \
    libxrandr2 \
    xdg-utils \
    chromium \
    && rm -rf /var/lib/apt/lists/*

# Create same medusa user (uid 1001)
RUN groupadd -g 1001 nodejs && \
    useradd -m -u 1001 -g nodejs medusa

WORKDIR /app
RUN chown medusa:nodejs /app

# Copy everything from builder (source + node_modules)
COPY --from=builder --chown=medusa:nodejs /app ./

USER medusa

# Development environment - builds at runtime when DB is available
ENV NODE_ENV=development
ENV NODE_OPTIONS="--max-old-space-size=2048"
ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium

EXPOSE 9000

# Health check with longer start period for dev build
HEALTHCHECK --interval=30s --timeout=3s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:9000/health || exit 1

# Use dumb-init and run medusa develop (builds + runs at startup)
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "./node_modules/.bin/medusa", "develop"]

