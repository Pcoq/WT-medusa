import { MedusaApp } from "@medusajs/framework"\nimport { PURCHASING_MODULE } from "../modules/purchasing"\nimport PurchasingService from "../modules/purchasing/service"\n\n/**\n * Migration script to consolidate multiple price lists per supplier into single active price lists\n * This script should be run after deploying the new price list model\n */\nasync function consolidatePriceLists() {\n  const app = await MedusaApp.create({\n    // Add your configuration here\n  })\n\n  const purchasingService = app.modules[PURCHASING_MODULE] as PurchasingService\n\n  try {\n    console.log(\"Starting price list consolidation...\")\n\n    // Get all suppliers\n    const suppliers = await purchasingService.listSuppliers()\n    console.log(`Found ${suppliers.length} suppliers to process`)\n\n    for (const supplier of suppliers) {\n      console.log(`Processing supplier: ${supplier.name} (${supplier.id})`)\n      \n      // Get all price lists for this supplier\n      const priceLists = await purchasingService.listSupplierPriceLists({\n        supplier_id: supplier.id\n      })\n      \n      if (priceLists.length === 0) {\n        console.log(`  No price lists found for supplier ${supplier.name}`)\n        continue\n      }\n      \n      if (priceLists.length === 1) {\n        // Already has single price list, just ensure it's active and has version\n        const priceList = priceLists[0]\n        await purchasingService.updateSupplierPriceLists(\n          { id: priceList.id },\n          { \n            is_active: true,\n            version: priceList.version || 1\n          }\n        )\n        console.log(`  Updated single price list for ${supplier.name}`)\n        continue\n      }\n      \n      console.log(`  Found ${priceLists.length} price lists, consolidating...`)\n      \n      // Find the most recent active price list or the most recent one\n      let activePriceList = priceLists.find(pl => pl.is_active)\n      if (!activePriceList) {\n        activePriceList = priceLists.sort((a, b) => \n          new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\n        )[0]\n      }\n      \n      // Collect all items from all price lists\n      const allItems = []\n      const itemsByVariant = new Map()\n      \n      for (const priceList of priceLists) {\n        const items = await purchasingService.listSupplierPriceListItems({\n          price_list_id: priceList.id\n        })\n        \n        for (const item of items) {\n          const key = item.product_variant_id\n          // Keep the most recent item for each variant\n          if (!itemsByVariant.has(key) || \n              new Date(item.updated_at) > new Date(itemsByVariant.get(key).updated_at)) {\n            itemsByVariant.set(key, item)\n          }\n        }\n      }\n      \n      allItems.push(...Array.from(itemsByVariant.values()))\n      \n      // Create new consolidated price list\n      const consolidatedPriceList = await purchasingService.createSupplierPriceList({\n        supplier_id: supplier.id,\n        name: `Consolidated Price List - ${supplier.name}`,\n        description: `Consolidated from ${priceLists.length} price lists on ${new Date().toISOString()}`,\n        currency_code: activePriceList.currency_code,\n        effective_date: activePriceList.effective_date,\n        expiry_date: activePriceList.expiry_date\n      })\n      \n      // Add all items to the new price list\n      if (allItems.length > 0) {\n        await purchasingService.processPriceListItems(\n          consolidatedPriceList.id,\n          allItems.map(item => ({\n            product_variant_id: item.product_variant_id,\n            product_id: item.product_id,\n            supplier_sku: item.supplier_sku,\n            variant_sku: item.variant_sku,\n            cost_price: item.cost_price,\n            quantity: item.quantity,\n            lead_time_days: item.lead_time_days,\n            notes: item.notes\n          }))\n        )\n      }\n      \n      // Deactivate old price lists\n      for (const oldPriceList of priceLists) {\n        await purchasingService.updateSupplierPriceLists(\n          { id: oldPriceList.id },\n          { is_active: false }\n        )\n      }\n      \n      console.log(`  Consolidated ${priceLists.length} price lists into 1 with ${allItems.length} items`)\n    }\n    \n    console.log(\"Price list consolidation completed successfully!\")\n    \n  } catch (error) {\n    console.error(\"Error during price list consolidation:\", error)\n    throw error\n  } finally {\n    await app.close()\n  }\n}\n\n// Run the migration\nconsolidatePriceLists()\n  .then(() => {\n    console.log(\"Migration completed successfully\")\n    process.exit(0)\n  })\n  .catch((error) => {\n    console.error(\"Migration failed:\", error)\n    process.exit(1)\n  })